package src.controller;

import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;
import src.util.*;

import java.awt.Toolkit;
import java.sql.Connection;

public class SignUpController {

    // Khai b√°o thu·ªôc t√≠nh
    @FXML
    private TextField usernameField;

    @FXML
    private TextField emailField;

    @FXML
    private PasswordField passwordField;

    @FXML
    private PasswordField confirmPasswordField;

    @FXML
    private TextField visiblePasswordField;

    @FXML
    private TextField visibleConfirmPasswordField;

    @FXML
    private Button togglePasswordButton;

    @FXML
    private Button toggleConfirmPasswordButton;

    @FXML
    private Button signUpButton;

    @FXML
    private Button loginButton;

    @FXML
    private Label capsLockWarning;

    // Tr·∫°ng th√°i Caps Lock
    private boolean isCapsLockOn;

    // Tr·∫°ng th√°i ·∫©n/hi·ªán m·∫≠t kh·∫©u
    private boolean isPasswordVisible = false;
    private boolean isConfirmPasswordVisible = false;

    @FXML
    public void initialize() {
        // Ki·ªÉm tra tr·∫°ng th√°i Caps Lock khi kh·ªüi ƒë·ªông
        isCapsLockOn = Toolkit.getDefaultToolkit().getLockingKeyState(java.awt.event.KeyEvent.VK_CAPS_LOCK);
        capsLockWarning.setVisible(isCapsLockOn);

        // G·∫Øn s·ª± ki·ªán cho n√∫t ƒêƒÇNG K√ù
        signUpButton.setOnAction(event -> handleSignUp());
        // G·∫Øn s·ª± ki·ªán cho n√∫t ƒêƒÇNG NH·∫¨P
        loginButton.setOnAction(event -> handleLogin());

        // L·∫Øng nghe s·ª± ki·ªán Caps Lock tr√™n tr∆∞·ªùng m·∫≠t kh·∫©u
        passwordField.setOnKeyReleased(event -> checkCapsLock(event));
        confirmPasswordField.setOnKeyReleased(event -> checkCapsLock(event));

        // ƒê·ªìng b·ªô h√≥a tr∆∞·ªùng m·∫≠t kh·∫©u v√† hi·ªÉn th·ªã m·∫≠t kh·∫©u
        setupPasswordFieldBinding(passwordField, visiblePasswordField);
        setupPasswordFieldBinding(confirmPasswordField, visibleConfirmPasswordField);

        // N√∫t toggle ·∫©n/hi·ªán m·∫≠t kh·∫©u
        togglePasswordButton.setOnAction(event -> togglePasswordVisibility());
        toggleConfirmPasswordButton.setOnAction(event -> toggleConfirmPasswordVisibility());
    }

    /**
     * X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n n√∫t ƒêƒÇNG K√ù
     */
    private void handleSignUp() {
        String username = usernameField.getText();
        String email = emailField.getText();
        String password = passwordField.getText();
        String confirmPassword = confirmPasswordField.getText();

        // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c tr∆∞·ªùng c√≥ r·ªóng kh√¥ng
        if (username.isEmpty() || email.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
            NotificationUtils.showWarning("L·ªói ƒëƒÉng k√Ω", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u c√≥ kh·ªõp kh√¥ng
        if (!password.equals(confirmPassword)) {
            NotificationUtils.showError("L·ªói ƒëƒÉng k√Ω", "M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
            return;
        }

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
        if (!ValidationUtils.isValidEmail(email)) {
            NotificationUtils.showError("L·ªói ƒëƒÉng k√Ω", "Email kh√¥ng h·ª£p l·ªá!");
            return;
        }

        // K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ l∆∞u t√†i kho·∫£n m·ªõi
        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "INSERT INTO users (username, email, password, role) VALUES (?, ?, SHA2(?, 256), 'student')";
            var preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, username);
            preparedStatement.setString(2, email);
            preparedStatement.setString(3, password);

            int rowsInserted = preparedStatement.executeUpdate();
            if (rowsInserted > 0) {
                NotificationUtils.showInfo("ƒêƒÉng k√Ω th√†nh c√¥ng", "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o cho " + username);
            } else {
                NotificationUtils.showError("L·ªói ƒëƒÉng k√Ω", "Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            NotificationUtils.showError("L·ªói", "ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu!");
        }
    }

    /**
     * X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n n√∫t ƒêƒÇNG NH·∫¨P
     */
    private void handleLogin() {
        Stage currentStage = (Stage) loginButton.getScene().getWindow();
        MainController mainController = (MainController) currentStage.getUserData();
        loadwindowsUtils.loadWindow(GlobalVariables.BASE_FXML_PATH + GlobalVariables.APP_NAME_LOGIN,
                GlobalVariables.LOGIN_NAME, currentStage);
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i Caps Lock
     */
    private void checkCapsLock(KeyEvent event) {
        if (event.getCode().toString().equals("CAPS")) {
            // ƒê·∫£o tr·∫°ng th√°i Caps Lock khi nh·∫•n ph√≠m Caps Lock
            isCapsLockOn = !isCapsLockOn;
        }

        // Hi·ªÉn th·ªã ho·∫∑c ·∫©n th√¥ng b√°o Caps Lock
        capsLockWarning.setVisible(isCapsLockOn);
    }

    /**
     * ·∫®n/Hi·ªán m·∫≠t kh·∫©u cho tr∆∞·ªùng m·∫≠t kh·∫©u ch√≠nh
     */
    private void togglePasswordVisibility() {
        isPasswordVisible = !isPasswordVisible;
        togglePasswordFieldVisibility(passwordField, visiblePasswordField, togglePasswordButton, isPasswordVisible);
    }

    /**
     * ·∫®n/Hi·ªán m·∫≠t kh·∫©u cho tr∆∞·ªùng x√°c nh·∫≠n m·∫≠t kh·∫©u
     */
    private void toggleConfirmPasswordVisibility() {
        isConfirmPasswordVisible = !isConfirmPasswordVisible;
        togglePasswordFieldVisibility(confirmPasswordField, visibleConfirmPasswordField, toggleConfirmPasswordButton,
                isConfirmPasswordVisible);
    }

    /**
     * ƒê·ªìng b·ªô h√≥a gi·ªØa tr∆∞·ªùng PasswordField v√† TextField
     */
    private void setupPasswordFieldBinding(PasswordField passwordField, TextField visiblePasswordField) {
        passwordField.textProperty()
                .addListener((observable, oldValue, newValue) -> visiblePasswordField.setText(newValue));
        visiblePasswordField.textProperty()
                .addListener((observable, oldValue, newValue) -> passwordField.setText(newValue));
    }

    /**
     * Chuy·ªÉn ƒë·ªïi gi·ªØa PasswordField v√† TextField
     */
    private void togglePasswordFieldVisibility(PasswordField passwordField, TextField visiblePasswordField,
            Button toggleButton, boolean isVisible) {
        if (isVisible) {
            visiblePasswordField.setVisible(true);
            visiblePasswordField.setManaged(true);

            passwordField.setVisible(false);
            passwordField.setManaged(false);

            toggleButton.setText("üîí");
        } else {
            passwordField.setVisible(true);
            passwordField.setManaged(true);

            visiblePasswordField.setVisible(false);
            visiblePasswordField.setManaged(false);

            toggleButton.setText("üëÅ");
        }
    }
}
